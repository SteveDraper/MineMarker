
;;;; minesweeper

(role sweeper)

;;;; base & input propositions

(<= (base (cell ?m ?n ?t)) (index ?m) (index ?n) (minemarking ?t))
(<= (base (ship ?x ?y)) (index ?x) (index ?y))
(<= (base (fired ?x)) (successor ?y ?x))
(base (fired 0))
(<= (base (moved ?x)) (successor ?y ?x))
(base (moved 0))
(base (controlallow move))
(base (controlallow fire))

(direction north)
(direction south)
(direction east)
(direction west)

(firepattern alpha)
(firepattern beta)
(firepattern gamma)
(firepattern delta)

(minemarking dot)
(minemarking star)

(<= (input sweeper (move ?d)) (direction ?d))
(<= (input sweeper (noop)))
(<= (input sweeper (fire ?f)) (firepattern ?f))

;;;; initial state

(init (fired 0))
(init (moved 0))
(init (controlallow move))
(init (controlallow fire))

;;;; legal moves

(<= (legal sweeper (move north))
    (true (controlallow move))
    (true (ship ?x ?y))
    (successor ?y2 ?y)
    (index ?y2))
(<= (legal sweeper (move south))
    (true (controlallow move))
    (true (ship ?x ?y))
    (successor ?y ?y2)
    (index ?y2))
(<= (legal sweeper (move east))
    (true (controlallow move))
    (true (ship ?x ?y))
    (successor ?x ?x2)
    (index ?x2))
(<= (legal sweeper (move west))
    (true (controlallow move))
    (true (ship ?x ?y))
    (successor ?x2 ?x)
    (index ?x2))

(<= (legal sweeper (fire ?p))
    (true (controlallow fire))
    (firepattern ?p))

(<= (legal sweeper noop))

;;;; torpedo pattern alpha
(<= (removed ?x ?y)
    (index ?x)
    (index ?y)
    (does sweeper (fire alpha))
    (true (ship ?x2 ?y2))
    (successor ?x ?x2)
    (successor ?y ?y2))
(<= (removed ?x ?y)
    (index ?x)
    (index ?y)
    (does sweeper (fire alpha))
    (true (ship ?x2 ?y2))
    (successor ?x ?x2)
    (successor ?y2 ?y))
(<= (removed ?x ?y)
    (index ?x)
    (index ?y)
    (does sweeper (fire alpha))
    (true (ship ?x2 ?y2))
    (successor ?x2 ?x)
    (successor ?y ?y2))
(<= (removed ?x ?y)
    (index ?x)
    (index ?y)
    (does sweeper (fire alpha))
    (true (ship ?x2 ?y2))
    (successor ?x2 ?x)
    (successor ?y2 ?y))

;;;; torpedo pattern beta
(<= (removed ?x ?y)
    (index ?x)
    (index ?y)
    (does sweeper (fire beta))
    (true (ship ?x ?y2))
    (successor ?y ?y2))
(<= (removed ?x ?y)
    (index ?x)
    (index ?y)
    (does sweeper (fire beta))
    (true (ship ?x ?y2))
    (successor ?y2 ?y))
(<= (removed ?x ?y)
    (index ?x)
    (index ?y)
    (does sweeper (fire beta))
    (true (ship ?x2 ?y))
    (successor ?x ?x2))
(<= (removed ?x ?y)
    (index ?x)
    (index ?y)
    (does sweeper (fire beta))
    (true (ship ?x2 ?y))
    (successor ?x2 ?x))

;;;; torpedo pattern gamma
(<= (removed ?x ?y)
    (index ?x)
    (index ?y)
    (does sweeper (fire gamma))
    (true (ship ?x ?y)))
(<= (removed ?x ?y)
    (index ?x)
    (index ?y)
    (does sweeper (fire gamma))
    (true (ship ?x2 ?y))
    (successor ?x ?x2))
(<= (removed ?x ?y)
    (index ?x)
    (index ?y)
    (does sweeper (fire gamma))
    (true (ship ?x2 ?y))
    (successor ?x2 ?x))

;;;; torpedo pattern delta
(<= (removed ?x ?y)
    (index ?x)
    (index ?y)
    (does sweeper (fire delta))
    (true (ship ?x ?y)))
(<= (removed ?x ?y)
    (index ?x)
    (index ?y)
    (does sweeper (fire delta))
    (true (ship ?x ?y2))
    (successor ?y ?y2))
(<= (removed ?x ?y)
    (index ?x)
    (index ?y)
    (does sweeper (fire delta))
    (true (ship ?x ?y2))
    (successor ?y2 ?y))

;;;; next states

(<= (next (controlallow move))
    (does sweeper noop))
(<= (next (controlallow fire))
    (does sweeper noop))
(<= (next (controlallow move))
    (true (controlallow move))
    (does sweeper (fire ?p))
    (firepattern ?p))
(<= (next (controlallow fire))
    (true (controlallow fire))
    (does sweeper (move ?d))
    (direction ?d))

(<= (next (fired ?x))
    (true (fired ?x))
    (does sweeper (move ?d))
    (direction ?d))
(<= (next (fired ?x))
    (true (fired ?x))
    (does sweeper noop))
(<= (next (fired ?x))
    (true (fired ?y))
    (successor ?y ?x)
    (does sweeper (fire ?p))
    (firepattern ?p))

(<= (next (moved ?x))
    (true (moved ?x))
    (does sweeper (fire ?p))
    (firepattern ?p))
(<= (next (moved ?x))
    (true (moved ?x))
    (does sweeper noop))
(<= (next (moved ?x))
    (true (moved ?y))
    (successor ?y ?x)
    (does sweeper (move ?d))
    (direction ?d))

(<= (next (cell ?x ?y dot))
    (true (cell ?x ?y dot)))
(<= (next (cell ?x ?y dot))
    (removed ?x ?y))

(<= (next (cell ?x ?y ?n))
    (true (cell ?x ?y ?n))
    (not (removed ?x ?y))
    (not (does sweeper noop)))

(<= (next (cell ?x ?y ?n))
    (true (cell ?x ?y ?m))
    (does sweeper noop)
    (not (removed ?x ?y))
    (successor ?m ?n))

(<= (next (ship ?x ?y))
    (true (ship ?x ?y))
    (does sweeper noop))
(<= (next (ship ?x ?y))
    (true (ship ?x ?y))
    (does sweeper (fire ?p)))

(<= (next (ship ?x ?y2))
    (does sweeper (move north))
    (true (ship ?x ?y))
    (successor ?y2 ?y))
(<= (next (ship ?x ?y2))
    (does sweeper (move south))
    (true (ship ?x ?y))
    (successor ?y ?y2))
(<= (next (ship ?x2 ?y))
    (does sweeper (move east))
    (true (ship ?x ?y))
    (successor ?x ?x2))
(<= (next (ship ?x2 ?y))
    (does sweeper (move west))
    (true (ship ?x ?y))
    (successor ?x2 ?x))

;;;; goal and terminal

(<= (goal sweeper 0) 
    minesremaining)

(<= terminal
    (true (cell ?x ?y star)))

(<= terminal
    (not minesremaining))

(<= minesremaining
    (true (cell ?x ?y ?z))
    (distinct ?z dot))
